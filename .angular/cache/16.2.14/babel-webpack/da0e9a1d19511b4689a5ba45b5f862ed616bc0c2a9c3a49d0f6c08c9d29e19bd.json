{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nimport { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Chart2Component {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8000/api/posts';\n  }\n  ngOnInit() {\n    Chart.register(...registerables); // Daftarkan semua modul Chart.js yang diperlukan\n    // Inisialisasi chart\n    this.chart = new Chart(\"myChart2\", {\n      type: 'line',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Volt A',\n          data: [],\n          borderColor: 'rgba(54, 162, 235, 1)',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }, {\n          label: 'Volt B',\n          data: [],\n          borderColor: 'rgba(255, 99, 132, 1)',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }, {\n          label: 'Volt C',\n          data: [],\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }, {\n          label: 'Curr A',\n          data: [],\n          borderColor: 'rgba(153, 102, 255, 1)',\n          backgroundColor: 'rgba(153, 102, 255, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }, {\n          label: 'Curr B',\n          data: [],\n          borderColor: 'rgba(255, 206, 86, 1)',\n          backgroundColor: 'rgba(255, 206, 86, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }, {\n          label: 'Curr C',\n          data: [],\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        },\n        elements: {\n          line: {\n            tension: 0.4 // Tambahkan ketegangan garis untuk membuatnya lebih mulus\n          }\n        }\n      }\n    });\n    // Panggil fungsi fetchData pertama kali\n    this.fetchData();\n    // Set interval untuk refresh data setiap 60 detik\n    interval(60000).subscribe(() => this.fetchData());\n  }\n  fetchData() {\n    this.http.get(this.apiUrl).subscribe(data => {\n      console.log('Data from API:', data); // Tambahkan log untuk memeriksa data API\n      // Buat labels dari created_at atau gunakan timestamp yang sesuai\n      const labels = data.map(entry => new Date(entry.created_at).toLocaleTimeString());\n      // Format data sesuai dengan yang diharapkan oleh chart\n      const voltA = data.map(entry => parseFloat(entry.voltA));\n      const voltB = data.map(entry => parseFloat(entry.voltB));\n      const voltC = data.map(entry => parseFloat(entry.voltC));\n      const currA = data.map(entry => parseFloat(entry.currA));\n      const currB = data.map(entry => parseFloat(entry.currB));\n      const currC = data.map(entry => parseFloat(entry.currC));\n      console.log('Volt A Data:', voltA);\n      console.log('Volt B Data:', voltB);\n      console.log('Volt C Data:', voltC);\n      console.log('Curr A Data:', currA);\n      console.log('Curr B Data:', currB);\n      console.log('Curr C Data:', currC);\n      // Update labels dan data chart\n      this.chart.data.labels = labels;\n      this.chart.data.datasets[0].data = voltA;\n      this.chart.data.datasets[1].data = voltB;\n      this.chart.data.datasets[2].data = voltC;\n      this.chart.data.datasets[3].data = currA;\n      this.chart.data.datasets[4].data = currB;\n      this.chart.data.datasets[5].data = currC;\n      // Update chart\n      this.chart.update();\n    });\n  }\n  static #_ = this.ɵfac = function Chart2Component_Factory(t) {\n    return new (t || Chart2Component)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Chart2Component,\n    selectors: [[\"app-chart2\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"myChart2\"]],\n    template: function Chart2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Chart","registerables","interval","Chart2Component","constructor","http","apiUrl","ngOnInit","register","chart","type","data","labels","datasets","label","borderColor","backgroundColor","borderWidth","tension","fill","pointRadius","borderDash","options","scales","y","beginAtZero","elements","line","fetchData","subscribe","get","console","log","map","entry","Date","created_at","toLocaleTimeString","voltA","parseFloat","voltB","voltC","currA","currB","currC","update","_","i0","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","Chart2Component_Template","rf","ctx","ɵɵelement"],"sources":["/Users/alhuzwiri/Documents/lab/Web/iot/nocproj/src/app/chart2/chart2.component.ts","/Users/alhuzwiri/Documents/lab/Web/iot/nocproj/src/app/chart2/chart2.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Chart, registerables } from 'chart.js';\nimport { HttpClient } from '@angular/common/http';\nimport { interval } from 'rxjs';\n@Component({\n  selector: 'app-chart2',\n  templateUrl: './chart2.component.html',\n  styleUrls: ['./chart2.component.css']\n})\nexport class Chart2Component implements OnInit{\n  private apiUrl = 'http://localhost:8000/api/posts';\n  private chart: any;\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    Chart.register(...registerables); // Daftarkan semua modul Chart.js yang diperlukan\n\n    // Inisialisasi chart\n    this.chart = new Chart(\"myChart2\", {\n      type: 'line',\n      data: {\n        labels: [], // Labels akan diisi berdasarkan waktu atau data yang relevan\n        datasets: [\n          {\n            label: 'Volt A',\n            data: [], // Data awal kosong, akan diisi dari API\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          },\n          {\n            label: 'Volt B',\n            data: [],\n            borderColor: 'rgba(255, 99, 132, 1)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          },\n          {\n            label: 'Volt C',\n            data: [],\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          },\n          {\n            label: 'Curr A',\n            data: [],\n            borderColor: 'rgba(153, 102, 255, 1)',\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          },\n          {\n            label: 'Curr B',\n            data: [],\n            borderColor: 'rgba(255, 206, 86, 1)',\n            backgroundColor: 'rgba(255, 206, 86, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          },\n          {\n            label: 'Curr C',\n            data: [],\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          }\n        ]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        },\n        elements: {\n          line: {\n            tension: 0.4 // Tambahkan ketegangan garis untuk membuatnya lebih mulus\n          }\n        }\n      }\n    });\n\n    // Panggil fungsi fetchData pertama kali\n    this.fetchData();\n\n    // Set interval untuk refresh data setiap 60 detik\n    interval(60000).subscribe(() => this.fetchData());\n  }\n\n  fetchData(): void {\n    this.http.get<any>(this.apiUrl).subscribe(data => {\n      console.log('Data from API:', data); // Tambahkan log untuk memeriksa data API\n\n      // Buat labels dari created_at atau gunakan timestamp yang sesuai\n      const labels = data.map((entry: any) => new Date(entry.created_at).toLocaleTimeString());\n\n      // Format data sesuai dengan yang diharapkan oleh chart\n      const voltA = data.map((entry: any) => parseFloat(entry.voltA));\n      const voltB = data.map((entry: any) => parseFloat(entry.voltB));\n      const voltC = data.map((entry: any) => parseFloat(entry.voltC));\n      const currA = data.map((entry: any) => parseFloat(entry.currA));\n      const currB = data.map((entry: any) => parseFloat(entry.currB));\n      const currC = data.map((entry: any) => parseFloat(entry.currC));\n\n      console.log('Volt A Data:', voltA);\n      console.log('Volt B Data:', voltB);\n      console.log('Volt C Data:', voltC);\n      console.log('Curr A Data:', currA);\n      console.log('Curr B Data:', currB);\n      console.log('Curr C Data:', currC);\n\n      // Update labels dan data chart\n      this.chart.data.labels = labels;\n      this.chart.data.datasets[0].data = voltA;\n      this.chart.data.datasets[1].data = voltB;\n      this.chart.data.datasets[2].data = voltC;\n      this.chart.data.datasets[3].data = currA;\n      this.chart.data.datasets[4].data = currB;\n      this.chart.data.datasets[5].data = currC;\n\n      // Update chart\n      this.chart.update();\n    });\n  }\n}\n","\n<canvas id=\"myChart2\">\n        \n</canvas>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}