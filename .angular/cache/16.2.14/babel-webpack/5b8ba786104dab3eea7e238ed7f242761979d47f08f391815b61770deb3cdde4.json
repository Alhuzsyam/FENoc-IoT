{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nimport { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChartComponent {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8000/api/posts';\n  }\n  ngOnInit() {\n    Chart.register(...registerables); // Daftarkan semua modul Chart.js yang diperlukan\n    // Inisialisasi chart\n    this.chart = new Chart(\"myChart\", {\n      type: 'line',\n      data: {\n        labels: ['Kwh Today', 'Kwh Last', 'Kvarh', 'T-L'],\n        datasets: [{\n          label: 'Blue Line',\n          data: [],\n          borderColor: 'rgba(54, 162, 235, 1)',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5] // Menambahkan dash untuk membuat efek seismograf lebih nyata\n        }, {\n          label: 'Red Line',\n          data: [],\n          borderColor: 'rgba(255, 99, 132, 1)',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }, {\n          label: 'Green Line',\n          data: [],\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderWidth: 2,\n          tension: 0.1,\n          fill: false,\n          pointRadius: 0,\n          borderDash: [5, 5]\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        },\n        elements: {\n          line: {\n            tension: 0.4 // Tambahkan ketegangan garis untuk membuatnya lebih mulus\n          }\n        }\n      }\n    });\n    // Panggil fungsi fetchData pertama kali\n    this.fetchData();\n    // Set interval untuk refresh data setiap 60 detik\n    interval(60000).subscribe(() => this.fetchData());\n  }\n  fetchData() {\n    this.http.get(this.apiUrl).subscribe(data => {\n      const sensorData = [data.kwh_today, data.kwh_last, data.kvarh, data.tl];\n      // Update data chart\n      this.chart.data.datasets.forEach(dataset => {\n        dataset.data = sensorData;\n      });\n      // Update chart\n      this.chart.update();\n    });\n  }\n  static #_ = this.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"app-chart\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"myChart\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Chart","registerables","interval","ChartComponent","constructor","http","apiUrl","ngOnInit","register","chart","type","data","labels","datasets","label","borderColor","backgroundColor","borderWidth","tension","fill","pointRadius","borderDash","options","scales","y","beginAtZero","elements","line","fetchData","subscribe","get","sensorData","kwh_today","kwh_last","kvarh","tl","forEach","dataset","update","_","i0","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","ChartComponent_Template","rf","ctx","ɵɵelement"],"sources":["/Users/alhuzwiri/Documents/lab/Web/iot/nocproj/src/app/chart/chart.component.ts","/Users/alhuzwiri/Documents/lab/Web/iot/nocproj/src/app/chart/chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Chart, registerables } from 'chart.js';\nimport { HttpClient } from '@angular/common/http';\nimport { interval } from 'rxjs';\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent implements OnInit {\n  private apiUrl = 'http://localhost:8000/api/posts';\n  private chart: any;\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    Chart.register(...registerables); // Daftarkan semua modul Chart.js yang diperlukan\n\n    // Inisialisasi chart\n    this.chart = new Chart(\"myChart\", {\n      type: 'line', // Ubah tipe chart menjadi 'line'\n      data: {\n        labels: ['Kwh Today', 'Kwh Last', 'Kvarh', 'T-L'],\n        datasets: [\n          {\n            label: 'Blue Line',\n            data: [], // Data awal kosong, akan diisi dari API\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderWidth: 2,\n            tension: 0.1, // Mengatur ketegangan garis untuk membuatnya lebih bergerigi\n            fill: false, // Tidak mengisi di bawah garis\n            pointRadius: 0, // Menghilangkan titik data\n            borderDash: [5, 5], // Menambahkan dash untuk membuat efek seismograf lebih nyata\n          },\n          {\n            label: 'Red Line',\n            data: [], // Data awal kosong, akan diisi dari API\n            borderColor: 'rgba(255, 99, 132, 1)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          },\n          {\n            label: 'Green Line',\n            data: [], // Data awal kosong, akan diisi dari API\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderWidth: 2,\n            tension: 0.1,\n            fill: false,\n            pointRadius: 0,\n            borderDash: [5, 5],\n          }\n        ]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        },\n        elements: {\n          line: {\n            tension: 0.4 // Tambahkan ketegangan garis untuk membuatnya lebih mulus\n          }\n        }\n      }\n    });\n\n    // Panggil fungsi fetchData pertama kali\n    this.fetchData();\n\n    // Set interval untuk refresh data setiap 60 detik\n    interval(60000).subscribe(() => this.fetchData());\n  }\n\n  fetchData(): void {\n    this.http.get<any>(this.apiUrl).subscribe(data => {\n      const sensorData = [\n        data.kwh_today,\n        data.kwh_last,\n        data.kvarh,\n        data.tl\n      ];\n\n      // Update data chart\n      this.chart.data.datasets.forEach((dataset: any) => {\n        dataset.data = sensorData;\n      });\n\n      // Update chart\n      this.chart.update();\n    });\n  }\n}\n","\n    <canvas id=\"myChart\">\n        \n    </canvas>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}